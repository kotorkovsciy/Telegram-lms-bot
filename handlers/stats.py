from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
from create_bot import db
from keyboards import kb_client
from scripts import LMS
from asyncio import sleep
from datetime import datetime as dt


async def cmd_schedule(message: types.Message):
    if not await db.userExsist(message.from_user.id):
        await message.answer(
            f"‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    else:
        msg = await message.answer("‚åõ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ ‚åõ")
        info = await db.userInfo(message.from_user.id)
        lms = LMS(info["email"], info["password"])
        schedule = lms.get_today_schedule()
        await msg.edit_text(f"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        for x, i in enumerate(schedule):
            if x == 0:
                if not i[:-6] == dt.today().strftime("%d.%m"):
                    await msg.answer("–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä")
                    break
                await message.answer(
                    i, reply_markup=await kb_client(await db.userExsist(message.from_id))
                )
            elif x == 1:
                for y in i:
                    await message.answer(
                        y, reply_markup=await kb_client(await db.userExsist(message.from_id))
                    )


async def cmd_info(message: types.Message):
    if not await db.userExsist(message.from_user.id):
        await message.answer(
            f"‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    else:
        msg = await message.answer("‚åõ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ ‚åõ")
        info = await db.userInfo(message.from_user.id)
        lms = LMS(info["email"], info["password"])
        info = lms.get_info_user()
        await msg.edit_text(
            f"üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n–í–∞—Å –∑–æ–≤—É—Ç  {info['name']}\n\nüì© –°–æ–æ–±—â–µ–Ω–∏–π: {info['message']}\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {info['notify']}"
        )


def register_handlers_stats(dp: Dispatcher):
    dp.register_message_handler(cmd_schedule, Text(equals="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    dp.register_message_handler(cmd_info, Text(equals="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
